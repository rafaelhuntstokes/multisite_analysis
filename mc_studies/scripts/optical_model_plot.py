import matplotlib.font_manager as fm
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
import numpy as np
path2 = '/data/snoplus3/hunt-stokes/nuPhysPoster/scripts/Times_New_Roman_Normal.ttf'
prop_font = fm.FontProperties(fname=path2, size = 12)

plt.rcParams['mathtext.default'] = 'regular'
plt.rcParams.update({'axes.unicode_minus' : False})

# set position of axis labels
plt.rcParams["xaxis.labellocation"] = 'right'
plt.rcParams["yaxis.labellocation"] = 'top'

# set global parameters with rcParams -- copy whole block below before plotting code to set plotting template globally

# set height and width of big markings on axis x
plt.rcParams['xtick.major.size'] = 6
plt.rcParams['xtick.major.width'] = 1.6
# set height and width of small markings on axis x
plt.rcParams['xtick.minor.size'] = 3
plt.rcParams['xtick.minor.width'] = 1.6
# set height and width of big markings on axis y
plt.rcParams['ytick.major.size'] = 6
plt.rcParams['ytick.major.width'] = 1.6
# set height and width of small markings on axis y
plt.rcParams['ytick.minor.size'] = 3
plt.rcParams['ytick.minor.width'] = 1.6
# set thickness of axes
plt.rcParams['axes.linewidth'] = 1.6
# set plot background color
plt.rcParams['figure.facecolor'] = 'white'
# set plot aspect ratio -- change according to needs
plt.rcParams['figure.figsize'] = (8.5, 6.5)
# set padding (between ticks and axis label)
plt.rcParams['xtick.major.pad'] = '12' ## change me if the axis labels overlap! ## 
plt.rcParams['ytick.major.pad'] = '12'
# set padding (between plot and title)
plt.rcParams['axes.titlepad'] = 12
# set markings on axis to show on the inside of the plot, can change if needed
plt.rcParams['xtick.direction'] = 'in'
plt.rcParams['ytick.direction'] = 'in'

# set ticks on both sides of x and y axes
plt.rcParams['xtick.top'] = True
plt.rcParams['xtick.bottom'] = True
plt.rcParams['ytick.left'] = True
plt.rcParams['ytick.right'] = True
plt.rcParams['xtick.minor.visible'] = True
plt.rcParams['ytick.minor.visible'] = True

histogram_style = {
    'histtype': 'step', 
    'color': 'blue',
    'alpha': 0.7,
    'linewidth': 2
}

scatter_style = {
    'marker': 's',
    'color': 'black',
    's': 25
}

errorbar_style = {
    'linestyle': 'None',
    'color': 'black',
    'capsize': 1.5
}

line_plot_style = {
    'linestyle': '-',
    'color': 'black',
    'linewidth': 2.5
}

wavelength = [200.0,204.0,208.0,212.0,216.0,220.0,224.0,228.0,232.0,236.0,240.0,244.0,248.0,252.0,256.0,260.0,264.0,268.0,272.0,276.0,280.0,284.0,288.0,292.0,296.0,300.0,304.0,308.0,312.0,316.0,320.0,324.0,328.0,332.0,336.0,340.0,344.0,348.0,352.0,356.0,360.0,364.0,368.0,372.0,376.0,380.0,384.0,388.0,392.0,396.0,400.0,404.0,408.0,412.0,416.0,420.0,424.0,428.0,432.0,436.0,440.0,444.0,448.0,452.0,456.0,460.0,464.0,468.0,472.0,476.0,480.0,484.0,488.0,492.0,496.0,500.0,504.0,508.0,512.0,516.0,520.0,524.0,528.0,532.0,536.0,540.0,544.0,548.0,552.0,556.0,560.0,564.0,568.0,572.0,576.0,580.0,584.0,588.0,592.0,596.0,800.0,] 
wavelength = np.array(wavelength)
wavelength2 =[200.0, 203.0, 205.0, 207.0, 209.0, 211.0, 213.0, 215.0, 217.0, 219.0, 221.0, 223.0, 225.0, 227.0, 229.0, 231.0, 233.0, 235.0, 237.0, 239.0, 241.0, 243.0, 245.0, 247.0, 249.0, 251.0, 253.0, 255.0, 257.0, 259.0, 261.0, 263.0, 265.0, 267.0, 269.0, 271.0, 273.0, 275.0, 277.0, 279.0, 281.0, 283.0, 285.0, 287.0, 289.0, 291.0, 293.0, 295.0, 297.0, 299.0, 301.0, 303.0, 305.0, 307.0, 309.0, 311.0, 313.0, 315.0, 317.0, 319.0, 321.0, 323.0, 325.0, 327.0, 329.0, 331.0, 333.0, 335.0, 337.0, 339.0, 341.0, 343.0, 345.0, 347.0, 349.0, 351.0, 353.0, 355.0, 357.0, 359.0, 361.0, 363.0, 365.0, 367.0, 369.0, 371.0, 373.0, 375.0, 377.0, 379.0, 381.0, 383.0, 385.0, 387.0, 389.0, 391.0, 393.0, 395.0, 397.0, 399.0, 401.0, 403.0, 405.0, 407.0, 409.0, 411.0, 413.0, 415.0, 417.0, 419.0, 421.0, 423.0, 425.0, 427.0, 429.0, 431.0, 433.0, 435.0, 437.0, 439.0, 441.0, 443.0, 445.0, 447.0, 449.0, 451.0, 453.0, 455.0, 457.0, 459.0, 461.0, 463.0, 465.0, 467.0, 469.0, 471.0, 473.0, 475.0, 477.0, 479.0, 481.0, 483.0, 485.0, 487.0, 489.0, 491.0, 493.0, 495.0, 497.0, 499.0, 501.0, 503.0, 505.0, 507.0, 509.0, 511.0, 513.0, 515.0, 517.0, 519.0, 521.0, 523.0, 525.0, 527.0, 529.0, 531.0, 533.0, 535.0, 537.0, 539.0, 541.0, 543.0, 545.0, 547.0, 549.0, 551.0, 553.0, 555.0, 557.0, 559.0, 561.0, 563.0, 565.0, 567.0, 569.0, 571.0, 573.0, 575.0, 577.0, 579.0, 581.0, 583.0, 585.0, 587.0, 589.0, 591.0, 593.0, 595.0, 597.0, 599.0, 800.0,]
lab_abs     = np.array([7.87815e-05, 0.000158718, 0.000150706, 0.000167642, 0.000247367, 0.000677804, 0.00695461, 0.0271749, 0.0364594, 0.036294, 0.02685, 0.017827, 0.0122925, 0.00946247, 0.00811422, 0.00671276, 0.00858868, 0.0102181, 0.059927, 0.177476, 0.639643, 0.914433, 1.00798, 1.06943, 1.30497, 1.74685, 2.47323, 3.78572, 6.84289, 11.107, 14.6668, 20.381, 46.9278, 182.826, 569.121, 1835.07, 3044.01, 3896.98, 23.22471948, 61.962211, 184.3073121, 544.9337258, 1068.434571, 1734.819, 2437.528301, 2765.288354, 3198.525187, 2626.820335, 4436.073563, 12893.44003, 23756.68872, 45575.0, 51714.0, 57853.0, 63992.0, 70131.0, 76270.0, 82409.0, 88548.0, 94687.0, 100826.0, 106965.0, 113104.0, 119243.0, 125382.0, 131521.0, 137660.0, 143799.0, 149938.0, 156077.0, 162216.0, 168355.0, 174494.0, 180633.0, 186772.0, 192880.0, 170218.0, 119947.0, 134871.0, 106003.0, 118008.0, 109176.0, 142798.0, 189147.0, 102984.0, 69766.2, 68685.3, 71184.7, 79118.8, 114845.0, 192290.0, 179022.0, 206327.0, 139264.0, 79387.3, 53684.0, 46585.6, 47583.3, 48159.0, 53196.7, 53196.7, ])
#lab_emit    = 

ppo_abs     = np.array([0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.10, 0.08, 0.08, 0.08, 0.08, 0.10, 0.13, 0.16, 0.18, 0.35, 2.67, 14.54, 46.42, 153.48, 615.48, 3161.72, 11648.37, 29581.64, 79147.82, 93991.11, 109496.92, 125691.65, 89736.18, 131206.78, 123521.51, 230805.52, 301136.01, 231729.56, 401878.06, 278144.19, 309747.94, 279570.68, 728541.73, 3095913.02, 510117.89, 426679.58, 1850493.69, 1652157.67, 2985087.36, 693746.67, 4180757.35, 5463284.31, 765928.83, 329421.59, 194373.59, 522505.93, 571240.90, 622653.32, 1614170.10, 333176.48, 472655.80, 296342.65, 1546301.99, 1702251.32, 1581002.71, 262241.69, 263677.05, 211228.28, 255327.25, 327434.98, 284494.18, 584698.18, 1077385.82, 470561.53, 422805.68, 315478.30, 422805.68, 850638.26, 2078453.04, 372815.85, 8712957.16, 2576189.30, 3486620.69, 3298503.54, 5159158.15, 5159158.15, ])
ppo_emit    =  np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3325e-05, 2.5735e-05, 2.774e-05, 4.345e-05, 6.395e-05, 3.86e-05, 2.735e-05, 2.53e-05, 2.98e-05, 3.375e-05, 3.22e-05, 3.295e-05, 4.1e-05, 3.865e-05, 6.52e-05, 7.65e-05, 0.000134, 0.0022, 0.00484, 0.0088, 0.011, 0.01276, 0.01408, 0.0132, 0.01364, 0.01408, 0.01628, 0.01892, 0.02068, 0.02244, 0.02112, 0.0198, 0.01848, 0.01672, 0.01584, 0.01628, 0.01672, 0.01672, 0.01672, 0.01584, 0.01385, 0.0125, 0.0114, 0.0108, 0.0104, 0.01, 0.0095, 0.00905, 0.00855, 0.00785, 0.00725, 0.0065, 0.00595, 0.00535, 0.00485, 0.0046, 0.0042, 0.0039, 0.00365, 0.0034, 0.0031, 0.00295, 0.0027, 0.00235, 0.0022, 0.002, 0.0018, 0.00165, 0.00145, 0.00135, 0.00125, 0.00115, 0.001, 0.00095, 0.0009, 0.00075, 0.00075, 0.00065, 0.0006, 0.00055, 0.00045, 0.00045, 0.0004, 0.00035, 0.00035, 0.00025, 0.0003, 0.00025, 0.0002, 0.0002, 0.0002, 0.00015, 0.00015, 0.00015, 0.00015, 0.0001, 0.0001, 0.0001, 0.0001, 5e-05, 0.0001, 5e-05, 5e-05, 5e-05, 5e-05, 5e-05, 5e-05, 5e-05, 5e-05, 0.0, 5e-05, 5e-05, 0.0, 5e-05, 0.0, 5e-05, 0.0, 5e-05, 0.0, 0.0, 5e-05, 0.0, 0.0, 5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ])

bismsb_abs  = np.array([60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 60.2128, 71.3132, 47.3332, 40.1554, 34.4333, 30.0458, 26.6085, 23.8182, 21.6346, 19.9968, 18.9454, 18.541, 18.3388, 18.3793, 18.723, 26.821, 17.3649, 16.1561, 17.3109, 19.6705, 23.0818, 28.2426, 36.2569, 52.3485, 88.6724, 189.966, 530.845, 1824.74, 7320.18, 30686.4, 159035, 421737, 4.97385e+06, 3.17705e+06, 1.96029e+06, 2.99116e+06, 3.17705e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.85883e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, 1.48707e+06, ])

bismsb_abs_old = np.array([ 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 29.78, 35.27, 23.41, 19.86, 17.03, 14.86, 13.16, 11.78, 10.70, 9.89, 9.37, 9.17, 9.07, 9.09, 9.26, 9.57, 10.31, 11.61, 13.45, 15.96, 19.88, 26.75, 40.94, 74.71, 174.47, 498.86, 1772.19, 6422.35, 19889.38, 54673.77, 159669.88, 810517.44, 2459960.67, 1571299.73, 969517.70, 1479365.82, 1571299.73, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 919339.14, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31, 735471.31,])
bismsb_emit = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 450.0, 525.0, 385.0, 600.0, 300.0, 626.0, 699.5, 224.5, 331.5, 484.0, 428.5, 251.0, 350.0, 299.5, 295.0, 286.0, 350.0, 295.5, 263.5, 537.5, 2077.5, 2590.0, 2725.0, 2405.0, 2695.0, 2775.0, 2545.0, 3470.0, 3795.0, 5135.0, 7955.0, 13450.0, 23400.0, 40800.0, 70350.0, 119500.0, 198500.0, 314500.0, 478500.0, 694000.0, 933500.0, 1.215e+06, 1.505e+06, 1.74e+06, 1.895e+06, 1.93e+06, 1.9e+06, 1.81e+06, 1.71e+06, 1.64e+06, 1.645e+06, 1.695e+06, 1.795e+06, 1.95e+06, 2.08e+06, 2.16e+06, 2.205e+06, 2.195e+06, 2.12e+06, 1.99e+06, 1.855e+06, 1.72e+06, 1.565e+06, 1.445e+06, 1.34e+06, 1.275e+06, 1.23e+06, 1.2e+06, 1.18e+06, 1.16e+06, 1.125e+06, 1.09e+06, 1.045e+06, 988500.0, 911500.0, 841500.0, 765000.0, 701000.0, 634000.0, 592000.0, 547500.0, 509500.0, 480000.0, 455500.0, 428000.0, 408500.0, 384000.0, 364500.0, 344500.0, 317000.0, 296500.0, 278500.0, 255500.0, 233000.0, 204500.0, 190500.0, 174500.0, 161500.0, 151000.0, 139000.0, 130000.0, 122500.0, 116000.0, 107500.0, 99900.0, 92100.0, 86000.0, 81450.0, 74550.0, 69650.0, 64450.0, 59650.0, 55150.0, 49650.0, 46700.0, 40650.0, 39050.0, 34350.0, 32250.0, 30100.0, 27550.0, 25800.0, 24550.0, 22200.0, 20650.0, 19100.0, 18500.0, 16500.0, 14650.0, 13950.0, 13450.0, 13100.0, 11250.0, 10445.0, 9500.0, 9160.0, 8320.0, 8065.0, 7835.0, 7050.0, 6535.0, 6270.0, 5395.0, 5070.0, 4590.0, 0.0,])

idx_lab = np.where(wavelength < 350)
idx_bismsb = np.where(wavelength > 370)
lab_abs = 1 / lab_abs
ppo_abs = 1/ ppo_abs
bismsb_abs = 1 / bismsb_abs
plt.plot(wavelength[idx_lab[0]], lab_abs[idx_lab[0]], label = "LAB Abs", color = "green")
plt.plot(wavelength, ppo_abs, label = "PPO Abs", color = "blue")
plt.plot(wavelength2, ppo_emit / np.sum(ppo_emit), color = "blue", linestyle = "dashed", label = "PPO Emit")
plt.plot(wavelength[idx_bismsb[0]], bismsb_abs[idx_bismsb[0]], label = "BISMSB Abs", color = "red")
plt.plot(wavelength2, bismsb_emit / np.sum(bismsb_emit), color = "red", linestyle = "dashed", label = "BISMSB Emit")

plt.ylim((0, 0.05))
plt.xlim((300, 600))

#plt.plot(wavelength, bismsb_abs_old / np.max(bismsb_abs_old), label = "BISMSB Abs OLD", color = "orange")
plt.legend(frameon = False, prop=fm.FontProperties(fname=path2, size = 14))
ax = plt.gca()
for label in ax.get_xticklabels():
    label.set_fontproperties(prop_font)

for label in ax.get_yticklabels():
    label.set_fontproperties(prop_font)
plt.xlabel("Wavelength [nm]", fontproperties = prop_font)
plt.ylabel(r"Inverse Absorption Length [mm $^{-1}$]", fontproperties = prop_font)
#plt.ylim((0, np.max(ppo_emit / np.sum(ppo_emit))))
plt.savefig("./abslengths_fig.pdf")